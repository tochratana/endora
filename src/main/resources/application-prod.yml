spring:
  # PostgreSQL Configuration for Cloud SQL - with resilient settings
  datasource:
    url: ${DATABASE_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: ${DB_DRIVER:org.postgresql.Driver}

    # Connection pool settings for Cloud deployment - more resilient
    hikari:
      maximum-pool-size: ${DB_MAX_CONNECTIONS:5}
      minimum-idle: ${DB_MIN_IDLE:1}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: 600000
      max-lifetime: 1800000
      initialization-fail-timeout: 1
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    database-platform: ${DB_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        jdbc:
          time_zone: UTC
    # Make JPA initialization more resilient
    defer-datasource-initialization: true
    open-in-view: false

  # MongoDB Configuration for production
  data:
    mongodb:
      uri: ${SPRING_DATA_MONGODB_URI}
      auto-index-creation: false

  # Email Configuration
  mail:
    host: ${EMAIL_HOST:smtp.gmail.com}
    port: ${EMAIL_PORT:587}
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connection-timeout: 5000
          timeout: 3000
          write-timeout: 5000
    # Allow startup even if mail server is unavailable
    test-connection: false

  # Keycloak Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI}

# Keycloak Configuration
keycloak:
  server-url: ${KEYCLOAK_SERVER_URL}
  realm: ${KEYCLOAK_REALM}
  client-id: ${KEYCLOAK_CLIENT_ID}
  client-secret: ${KEYCLOAK_CLIENT_SECRET}
  admin:
    client-id: ${KEYCLOAK_ADMIN_CLIENT_ID}
    client-secret: ${KEYCLOAK_ADMIN_CLIENT_SECRET}

# OTP Configuration
app:
  otp:
    expiry-minutes: ${OTP_EXPIRY_MINUTES:5}
    max-attempts: ${OTP_MAX_ATTEMPTS:3}
  # OpenAPI Configuration for Production
  openapi:
    server:
      url: https://api.api-ngin.oudom.dev
      description: Production Server

# Server Configuration
server:
  port: ${PORT:8080}
  # Add graceful shutdown and startup settings
  shutdown: graceful
  error:
    include-message: never
    include-binding-errors: never

# Health check configuration
management:
  health:
    defaults:
      enabled: true
    probes:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: never
      probes:
        enabled: true

# Logging configuration for Production
logging:
  level:
    root: WARN
    rinsanom.com.springtwodatasoure: INFO
    org.keycloak: WARN
    org.springframework: WARN
    org.hibernate: WARN
