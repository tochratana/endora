spring:
  # PostgreSQL Configuration for Cloud SQL - with resilient settings
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://google/endora?cloudSqlInstance=api-engine-backend-20250829:us-central1:endora-postgres-db&socketFactory=com.google.cloud.sql.postgres.SocketFactory&useSSL=false}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:EndoraSecure2024!}
    driver-class-name: ${DB_DRIVER:org.postgresql.Driver}

    # Connection pool settings for Cloud deployment - more resilient
    hikari:
      maximum-pool-size: ${DB_MAX_CONNECTIONS:5}
      minimum-idle: ${DB_MIN_IDLE:1}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: 600000
      max-lifetime: 1800000
      initialization-fail-timeout: ${SPRING_DATASOURCE_HIKARI_INITIALIZATION_FAIL_TIMEOUT:1}
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
    database-platform: ${DB_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        jdbc:
          time_zone: UTC
    # Make JPA initialization more resilient
    defer-datasource-initialization: true
    open-in-view: false

  # MongoDB Configuration for production - with error handling
  data:
    mongodb:
      uri: ${SPRING_DATA_MONGODB_URI:mongodb+srv://endora_user:EndoraSecure2024!@endora-cluster.p5pmd6m.mongodb.net/endora?retryWrites=true&w=majority&connectTimeoutMS=10000&serverSelectionTimeoutMS=10000}
      auto-index-creation: ${SPRING_DATA_MONGODB_AUTO_INDEX_CREATION:false}

  # Email Configuration - more resilient
  mail:
    host: ${EMAIL_HOST:smtp.gmail.com}
    port: ${EMAIL_PORT:587}
    username: ${EMAIL_USERNAME:endora.istad@gmail.com}
    password: ${EMAIL_PASSWORD:utnu dtwk xyre ebkh}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connection-timeout: 5000
          timeout: 3000
          write-timeout: 5000
    # Allow startup even if mail server is unavailable
    test-connection: false

  # Keycloak Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:https://endora-oauth2.istad.co/realms/endora_api}

# Keycloak Configuration
keycloak:
  server-url: ${KEYCLOAK_SERVER_URL:https://endora-oauth2.istad.co/}
  realm: ${KEYCLOAK_REALM:endora_api}
  client-id: ${KEYCLOAK_CLIENT_ID:spring-admin}
  client-secret: ${KEYCLOAK_CLIENT_SECRET:uliUJohOY9OI1jM1SnFrog5iJ23JXWJN}
  admin:
    client-id: ${KEYCLOAK_ADMIN_CLIENT_ID:admin-cli}
    client-secret: ${KEYCLOAK_ADMIN_CLIENT_SECRET:b2L6hrMg76JLk4GSLd8CGMPRJNnAOko2}

# OTP Configuration
app:
  otp:
    expiry-minutes: ${OTP_EXPIRY_MINUTES:5}
    max-attempts: ${OTP_MAX_ATTEMPTS:3}
  # OpenAPI Configuration for Production
  openapi:
    server:
      url: https://api.api-ngin.oudom.dev
      description: Production Server

# Server Configuration
server:
  port: ${PORT:8080}
  # Add graceful shutdown and startup settings
  shutdown: graceful
  tomcat:
    connection-timeout: 20000
    threads:
      max: 200
      min-spare: 10
  error:
    include-message: never
    include-binding-errors: never

# Health check configuration - more resilient
management:
  health:
    defaults:
      enabled: true
    mongo:
      enabled: true
    db:
      enabled: true
    # Don't fail startup if health checks fail
    probes:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,readiness,liveness
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true

# Logging configuration for Production
logging:
  level:
    root: ${ROOT_LOG_LEVEL:WARN}
    rinsanom.com.springtwodatasoure: ${LOG_LEVEL:INFO}
    org.keycloak: WARN
    org.springframework.data.mongodb: WARN
    org.springframework.security: WARN
    org.hibernate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
